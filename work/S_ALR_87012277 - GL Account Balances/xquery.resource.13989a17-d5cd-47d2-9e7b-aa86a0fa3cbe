{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "a8b35e20-8bed-4a71-a9c4-d3f3d60864d5",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external := 0;\ndeclare variable $size external := 10;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sKTOPL external;\ndeclare variable $sRACCT external;\ndeclare variable $sBUKRS external;\ndeclare variable $sRYEAR external;\ndeclare variable $sPERIOD external;\n\n\ndeclare function local:getResultsPage($rows, $page, $size)\n{\n\tlet $offset := $page * $size\n  \tlet $total := count($rows)\n  \treturn <results total=\"{ $total }\"> { for $row in subsequence($rows, $offset + 1, $size) return $row }</results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\n\tif (empty($var) or $var = \"\")\n\tthen $whereClause\n\telse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\ndeclare function local:getGLT0($bukrs, $racct, $ryear)\n{\n for $glt0 in /SAP/GLT0/ROW[RLDNR = '00' and RRCTY = '0' and RVERS = '001' and BUKRS = $bukrs and RYEAR = $ryear and RACCT = $racct]\n return <RS><GLT0>{ $glt0 }</GLT0></RS>\n};\n\n \n\ndeclare function local:getBalancePrevious($period,$HSL01,$HSL02,$HSL03,$HSL04,$HSL05,$HSL06,$HSL07,$HSL08,$HSL09,$HSL10,$HSL11,$HSL12,$HSL13,$HSL14,$HSL15,$HSL16)\n{\n\tswitch ($period)\n    case '1'   return 0.00\n   \n    case '2'  return sum($HSL01) + sum($HSL02) + sum($HSL03)\n   \n    case '3'  return sum($HSL01) + sum($HSL02) + sum($HSL03) + sum($HSL04) + sum($HSL05) + sum($HSL06)\n    \n    case '4'  return sum($HSL01) + sum($HSL02) + sum($HSL03) + sum($HSL04) + sum($HSL05) + sum($HSL06) + sum($HSL07) + sum($HSL08) + sum($HSL09)\n    \n   default return 0\n};\n(:HSL12 =  + sum($HSL13) + sum($HSL14) + sum($HSL15) + sum($HSL16):)\ndeclare function local:getDebit($drcrk,$HSL01,$HSL02,$HSL03,$HSL04,$HSL05,$HSL06,$HSL07,$HSL08,$HSL09,$HSL10,$HSL11,$HSL12,$HSL13,$HSL14,$HSL15,$HSL16,$period)\n{\n\tif ($drcrk = 'S')\n    then\n     switch ($period)\n    case '1'   return sum($HSL01) + sum($HSL02) + sum($HSL03)\n   \n    case '2'  return  sum($HSL04) + sum($HSL05) + sum($HSL06)\n   \n    case '3'  return sum($HSL07) + sum($HSL08) + sum($HSL09)\n    \n    case '4'  return sum($HSL10) + sum($HSL11) + sum($HSL12) + sum($HSL13) + sum($HSL14) + sum($HSL15) + sum($HSL16)\n    \n    default return  sum($HSL01) + sum($HSL02) + sum($HSL03) + sum($HSL04) + sum($HSL05) + sum($HSL06) + sum($HSL07) + sum($HSL08) + sum($HSL09) + sum($HSL10) + sum($HSL11) + sum($HSL12) + sum($HSL13) + sum($HSL14) + sum($HSL15) + sum($HSL16)\n    \n    \n    else\n    let $debit := 0.00\n    return $debit\n\n};\ndeclare function local:getCredit($drcrk,$HSL01,$HSL02,$HSL03,$HSL04,$HSL05,$HSL06,$HSL07,$HSL08,$HSL09,$HSL10,$HSL11,$HSL12,$HSL13,$HSL14,$HSL15,$HSL16,$period)\n{\n\tif ($drcrk != 'S')\n    then\n    switch ($period)\n    case '1'   return sum($HSL01) + sum($HSL02) + sum($HSL03)\n   \n    case '2'  return  sum($HSL04) + sum($HSL05) + sum($HSL06)\n   \n    case '3'  return sum($HSL07) + sum($HSL08) + sum($HSL09)\n    \n    case '4'  return sum($HSL10) + sum($HSL11) + sum($HSL12) + sum($HSL13) + sum($HSL14) + sum($HSL15) + sum($HSL16)\n    \n    default return  sum($HSL01) + sum($HSL02) + sum($HSL03) + sum($HSL04) + sum($HSL05) + sum($HSL06) + sum($HSL07) + sum($HSL08) + sum($HSL09) + sum($HSL10) + sum($HSL11) + sum($HSL12) + sum($HSL13) + sum($HSL14) + sum($HSL15) + sum($HSL16)\n    \n    \n    else \n    let $credit := 0.00\n    return $credit\n   \n};\ndeclare function local:getCarryForwardPeriods($period)\n{\n\tswitch ($period)\n    case '1'   return \"00-00\"\n    case '2'  return  \"01-03\"\n    case '3'  return \"01-06\"\n    case '4'  return  \"01-09\"\n    \n \n   default return \"01-16\"\n};\n\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sKTOPL, concat(\"contains($ska1/KTOPL, &apos;\", $sKTOPL, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sRACCT, concat(\"$ska1/SAKNR = &apos;\", $sRACCT, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sBUKRS, concat(\"$skb1/BUKRS = &apos;\", $sBUKRS, \"&apos;\"))\n\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $ska1 in /SAP/SKA1/ROW, $skb1 in /SAP/SKB1/ROW[BUKRS = \",$sBUKRS,\" and SAKNR = $ska1/SAKNR]\", $whereClause, \" return <RS><SKA1>{ $ska1 }</SKA1><SKB1>{ $skb1 }</SKB1></RS>\")\nlet $main-query := xhive:evaluate($query-str)\nlet $rows := \n\tfor $rs in $main-query\n   let $GLT0 :=  local:getGLT0($rs/SKB1/ROW/BUKRS/text(), $rs/SKA1/ROW/SAKNR/text(), $sRYEAR)\n   \n    let $HSL01 := if (fn:exists($GLT0/GLT0/ROW/HSL01/text())) then ($GLT0/GLT0/ROW/HSL01/text()) else (0)\n   let $HSL02 := if (fn:exists($GLT0/GLT0/ROW/HSL02/text())) then ($GLT0/GLT0/ROW/HSL02/text()) else(0)\n   let $HSL03 := if (fn:exists($GLT0/GLT0/ROW/HSL03/text())) then ($GLT0/GLT0/ROW/HSL03/text()) else(0)\n   let $HSL04 := if (fn:exists($GLT0/GLT0/ROW/HSL04/text())) then ($GLT0/GLT0/ROW/HSL04/text()) else(0)\n   let $HSL05 := if (fn:exists($GLT0/GLT0/ROW/HSL05/text())) then ($GLT0/GLT0/ROW/HSL05/text()) else(0) \n   let $HSL06 := if (fn:exists($GLT0/GLT0/ROW/HSL06/text())) then ($GLT0/GLT0/ROW/HSL06/text()) else(0)  \n   let $HSL07 := if (fn:exists($GLT0/GLT0/ROW/HSL07/text())) then ($GLT0/GLT0/ROW/HSL07/text()) else(0)  \n   let $HSL08 := if (fn:exists($GLT0/GLT0/ROW/HSL08/text())) then ($GLT0/GLT0/ROW/HSL08/text()) else(0)  \n   let $HSL09 := if (fn:exists($GLT0/GLT0/ROW/HSL09/text())) then ($GLT0/GLT0/ROW/HSL09/text()) else(0)  \n   let $HSL10 := if (fn:exists($GLT0/GLT0/ROW/HSL10/text())) then ($GLT0/GLT0/ROW/HSL10/text()) else(0)  \n   let $HSL11 := if (fn:exists($GLT0/GLT0/ROW/HSL11/text())) then ($GLT0/GLT0/ROW/HSL11/text()) else(0) \n   let $HSL12 := if (fn:exists($GLT0/GLT0/ROW/HSL12/text())) then ($GLT0/GLT0/ROW/HSL12/text()) else(0) \n   let $HSL13  := if (fn:exists($GLT0/GLT0/ROW/HSL13/text())) then ($GLT0/GLT0/ROW/HSL13/text()) else(0)\n   let $HSL14 := if (fn:exists($GLT0/GLT0/ROW/HSL14/text())) then ($GLT0/GLT0/ROW/HSL14/text()) else(0) \n   let $HSL15 := if (fn:exists($GLT0/GLT0/ROW/HSL15/text())) then ($GLT0/GLT0/ROW/HSL15/text()) else(0)\n   let $HSL16 := if (fn:exists($GLT0/GLT0/ROW/HSL16/text())) then ($GLT0/GLT0/ROW/HSL16/text()) else(0)\n   \n   let $carryforwardBal :=  sum($GLT0/GLT0/ROW/HSLVT/text())\n  \n   let $PrevBal := local:getBalancePrevious($sPERIOD,$HSL01,$HSL02,$HSL03,$HSL04,$HSL05,$HSL06,$HSL07,$HSL08,$HSL09,$HSL10,$HSL11,$HSL12,$HSL13,$HSL14,$HSL15,$HSL16)\n   \n   let $Debit := local:getDebit($GLT0/GLT0/ROW/DRCRK/text(),$HSL01,$HSL02,$HSL03,$HSL04,$HSL05,$HSL06,$HSL07,$HSL08,$HSL09,$HSL10,$HSL11,$HSL12,$HSL13,$HSL14,$HSL15,$HSL16,xs:string($sPERIOD))\n   let $Credit := local:getCredit($GLT0/GLT0/ROW/DRCRK/text(),$HSL01,$HSL02,$HSL03,$HSL04,$HSL05,$HSL06,$HSL07,$HSL08,$HSL09,$HSL10,$HSL11,$HSL12,$HSL13,$HSL14,$HSL15,$HSL16,xs:string($sPERIOD))\n   \n   let $fixedCFB := if($carryforwardBal lt 0) then($carryforwardBal * -1) else($carryforwardBal)\n   let $fixedPrevBal := if($PrevBal lt 0) then($PrevBal * -1) else($PrevBal)\n   let $fixedcredit := if($Credit lt 0) then($Credit * -1) else($Credit)\n   \n   let $accBalance :=  ($fixedCFB + $fixedPrevBal) + ($Debit + $fixedcredit) \n   let $cfPeriods := local:getCarryForwardPeriods($sPERIOD)\n   \n   let $OTR01 := sias:get_t001($rs/SKB1/ROW/BUKRS/text(), \"ORT01\")\n   let $BUTXT := sias:get_t001($rs/SKB1/ROW/BUKRS/text(), \"BUTXT\")\n   let $TXT50 := sias:get_skat($rs/SKA1/ROW/KTOPL/text(), $rs/SKA1/ROW/SAKNR/text(), \"TXT50\")\n   let $TXT20 := sias:get_skat($rs/SKA1/ROW/KTOPL/text(), $rs/SKA1/ROW/SAKNR/text(), \"TXT20\")\n    return\n\n<row id='{string($rs/SKA1/ROW/@table:id)}'>\n<column name='cBUTXT'>{  $BUTXT }</column>\n<column name='cORT01'>{ $OTR01}</column>\n<column name='cLEDGER'>{ \"0L\" }</column>\n<column name='cCARRY'>{ $cfPeriods }</column>\n<column name='cREPORTING'>{ $rs/SKA1/ROW/KTOPL/text() }</column>\n\n\n<column name='cBUKRS'>{ $rs/SKB1/ROW/BUKRS/text() }</column>\n<column name='cSAKNR'>{ $rs/SKA1/ROW/SAKNR/text() }</column>\n<column name='cTXT20'>{ $TXT20 }</column>\n<column name='cWAERS'>{ $rs/SKB1/ROW/WAERS/text() }</column>\n\n<column name='cHSLVT'>{ fn:format-number($carryforwardBal,\"#,##0.00\") }</column>\n\n<column name='cHSLNN'>{fn:format-number($PrevBal,\"#,##0.00\")}</column>\n<column name='cHSLNN1'>{ fn:format-number($Debit,\"#,##0.00\") }</column>\n<column name='cHSLNN2'>{ fn:format-number($Credit,\"#,##0.00\") }</column>\n<column name='cBALANCE'>{ fn:format-number($accBalance,\"#,##0.00\") }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "S_ALR_87012277 - GL Account Balances",
  "compositionName" : "Set 1"
}