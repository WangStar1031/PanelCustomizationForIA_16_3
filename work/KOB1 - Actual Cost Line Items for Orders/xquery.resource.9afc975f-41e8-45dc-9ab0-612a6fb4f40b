{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "6beefe3f-4bfb-4d57-bee7-22ee82d040c7",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external := 0;\ndeclare variable $size external := 10;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sKOKRS external;\ndeclare variable $sAUFNR external;\ndeclare variable $sAUFNR2 external;\ndeclare variable $sKSTAR external;\ndeclare variable $sKSTAR2 external;\ndeclare variable $sBUDAT external;\n\ndeclare function local:getResultsPage($rows, $page, $size)\n{\n\tlet $offset := $page * $size\n  \tlet $total := count($rows)\n  \treturn <results total=\"{ $total }\"> { for $row in subsequence($rows, $offset + 1, $size) return $row }</results>\n};\ndeclare function local:get_LFA1($gkont)\n{\n\tfor $lfa1 in /SAP/LFA1/ROW\n    where $lfa1/LIFNR = $gkont\n    return $lfa1/NAME1/text()\n};\n\ndeclare function local:get_KNA1($gkont)\n{\n   for $kna1 in /SAP/KNA1/ROW\n   where $kna1/KUNNR = $gkont\n    return $kna1/NAME1/text()\n};\n\ndeclare function local:get_SKAT($gkont, $ktopl)\n{\n\tfor $skat in /SAP/SKAT/ROW\n    where $skat/SPRAS = 'EN' and $skat/KTOPL = $ktopl and $skat/SAKNR = $gkont\n    return\t$skat/TXT20/text\n}; \n\ndeclare function local:get_Result($LFname1, $KNname1, $txt20, $gkoar)\n{\n\tif ($gkoar = 'K')\n    then \n    let $result := $LFname1\n    return $result\n    else if ($gkoar = 'D')\n    then \n    let $result := $KNname1\n    return $result\n    else \n    let $result := $txt20\n    return $result\n};\n\n\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\n\tif (empty($var) or $var = \"\")\n\tthen $whereClause\n\telse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $frDate := replace($sBUDAT/from,'-','')\nlet $toDate := replace($sBUDAT/to,'-','')\nlet $whereClause := local:addClause(\"\", $sKOKRS, concat(\"contains($aufk/KOKRS, &apos;\", $sKOKRS, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sAUFNR, concat(\"$aufk/AUFNR >= &apos;\", $sAUFNR, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sAUFNR2, concat(\"$aufk/AUFNR <= &apos;\", $sAUFNR2, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sKSTAR, concat(\"$coep/KSTAR >= &apos;\", $sKSTAR, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sKSTAR2, concat(\"$coep/KSTAR <= &apos;\", $sKSTAR2, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $frDate, concat(\"$cobk/BUDAT >= &apos;\", $frDate, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $toDate, concat(\"$cobk/BUDAT <= &apos;\", $toDate, \"&apos;\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $aufk in /SAP/AUFK/ROW, $coep in /SAP/COEP/ROW[OBJNR = $aufk/OBJNR and KSTAR = '\",$sKSTAR,\"' and KOKRS = $aufk/KOKRS],$cobk in /SAP/COBK/ROW[KOKRS = $coep/KOKRS and BELNR = $coep/BELNR and BUDAT >= '\",$frDate,\"' and BUDAT <= '\",$toDate,\"'], $tka01 in /SAP/TKA01/ROW[KOKRS = $coep/KOKRS], $csku in /SAP/CSKU/ROW[SPRAS = 'EN' and KTOPL = $tka01/KTOPL and KSTAR = $coep/KSTAR] \", $whereClause, \" return <RS><AUFK>{ $aufk }</AUFK><COEP>{ $coep }</COEP><COBK>{ $cobk }</COBK><TKA01>{ $tka01 }</TKA01><CSKU>{ $csku }</CSKU></RS>\")\nlet $main-query := xhive:evaluate($query-str)\nlet $rows := \n\tfor $rs in $main-query \n    let $BLDAT := sias:showdate($rs/COBK/ROW/BLDAT/text())\n    let $BUDAT := sias:showdate($rs/COBK/ROW/BUDAT/text())\n    let $LFA1 := local:get_LFA1($rs/COEP/ROW/GKONT/text())\n    let $KNA1 := local:get_KNA1($rs/COEP/ROW/GKONT/text())\n    let $SKAT := local:get_SKAT($rs/COEP/ROW/GKONT/text(), $rs/TKA01/ROW/KTOPL/text()) \n    let $RESULT := local:get_Result($LFA1, $KNA1, $SKAT,$rs/COEP/ROW/GKOAR/text())\n    order by xs:integer($rs/COEP/ROW/PERIO/text()),xs:date($BUDAT) ascending\nreturn\n\n<row id='{string($rs/AUFK/ROW/@table:id)}'>\n<column name='cAUFNR'>{ $rs/AUFK/ROW/AUFNR/text() }</column>\n<column name='cKTEXT'>{ $rs/AUFK/ROW/KTEXT/text() }</column>\n<column name='cKSTAR'>{ $rs/COEP/ROW/KSTAR/text() }</column>\n<column name='cKTXT'>{ $rs/CSKU/ROW/MCTXT/text() }</column>\n<column name='cWKGBTR'>{ $rs/COEP/ROW/WKGBTR/text() }</column>\n<column name='cMBGBTR'>{ $rs/COEP/ROW/MBGBTR/text() }</column>\n<column name='cMEINB'>{ $rs/COEP/ROW/MEINB/text() }</column>\n<column name='cGKOAR'>{ $rs/COEP/ROW/GKOAR/text() }</column>\n<column name='cGKONT'>{ $rs/COEP/ROW/GKONT/text() }</column>\n<column name='cNAME1'>{ $RESULT }</column>\n<column name='cBELNR'>{ $rs/COEP/ROW/BELNR/text() }</column>\n<column name='cBUZEI'>{ $rs/COEP/ROW/BUZEI/text() }</column>\n<column name='cSGTXT'>{ $rs/COEP/ROW/SGTXT/text() }</column>\n<column name='cWSDAT'>{ $rs/COBK/ROW/WSDAT/text() }</column>\n<column name='cBLART'>{ $rs/COBK/ROW/BLART/text() }</column>\n<column name='cPARGB'>{ $rs/COEP/ROW/PARGB/text() }</column>\n<column name='cTWAER'>{ $rs/COEP/ROW/TWAER/text() }</column>\n<column name='cREFGJ'>{ $rs/COBK/ROW/REFGJ/text() }</column>\n<column name='cGJAHR'>{ $rs/COEP/ROW/GJAHR/text() }</column>\n<column name='cBUDAT'>{  $BUDAT }</column>\n<column name='cBLDAT'>{  $BLDAT }</column>\n<column name='cPERIO'>{ $rs/COEP/ROW/PERIO/text() }</column>\n<column name='cBUKRS'>{ $rs/COEP/ROW/BUKRS/text() }</column>\n\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "KOB1 - Actual Cost Line Items for Orders",
  "compositionName" : "Set 1"
}