{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "b8fdd27c-6cc8-4414-a2ad-dc33cc638ac6",
  "query" : "declare option xhive:index-debug 'true';\ndeclare option xhive:queryplan-debug 'true';\ndeclare option xhive:pathexpr-debug 'true';\n\ndeclare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sKUNNR external;\ndeclare variable $sBUKRS external;\ndeclare variable $sVKORG external;\ndeclare variable $sVTWEG external;\ndeclare variable $sSPART external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sKUNNR, concat(\"contains($knb1/KUNNR, &apos;\", $sKUNNR, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sBUKRS, concat(\"$knb1/BUKRS = &apos;\", $sBUKRS, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sVKORG, concat(\"$knvv/VKORG = &apos;\", $sVKORG, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sVTWEG, concat(\"$knvv/VTWEG = &apos;\", $sVTWEG, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sSPART, concat(\"$knvv/SPART = &apos;\", $sSPART, \"&apos;\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $knb1 in /SAP/KNB1/ROW, $knvv in /SAP/KNVV/ROW[KUNNR = $knb1/KUNNR], $kna1 in /SAP/KNA1/ROW[KUNNR = $knb1/KUNNR], $knva in /SAP/KNVA/ROW[KUNNR = $knb1/KUNNR]\", $whereClause, \"return <RS><KNB1>{ $knb1 }</KNB1><KNVV>{ $knvv }</KNVV><KNA1>{ $kna1 }</KNA1><KNVA>{ $knva }</KNVA></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n\tfor $rs in $main-query\n    \nlet $TFACT := sias:get_tfact($rs/KNVA/ROW/KNFAK/text())\nlet $TVWAT := sias:get_tvwat($rs/KNVA/ROW/WANID/text())\nlet $T001 := sias:get_t001($rs/KNB1/ROW/BUKRS/text(), \"BUTXT\")\nlet $TVKOT := sias:get_tvkot($rs/KNVV/ROW/VKORG/text())\nlet $TVTWT := sias:get_tvtwt($rs/KNVV/ROW/VTWEG/text())\nlet $TSPAT := sias:get_tspat($rs/KNVV/ROW/SPART/text())\nlet $KUNNR_trim := sias:trimzero($rs/KNVV/ROW/KUNNR/text())\n    \nreturn\n<row id='{string($rs/KNB1/ROW/@table:id)}'>\n<column name='cWHERE'>{ $whereClause }</column>\n\n<column name='cKUNNR1'>{ $KUNNR_trim }{ '     ' }{ $rs/KNA1/ROW/NAME1/text() }{ '     ' }{ $rs/KNA1/ROW/ORT01/text() }</column>\n<column name='cBUKRS1'>{ $rs/KNB1/ROW/BUKRS/text() }{ '     ' }{ $T001 }</column>\n<column name='cVKORG1'>{ $rs/KNVV/ROW/VKORG/text() }{ '     ' }{ $TVKOT }</column>\n<column name='cVTWEG1'>{ $rs/KNVV/ROW/VTWEG/text() }{ '     ' }{ $TVTWT }</column>\n<column name='cSPART1'>{ $rs/KNVV/ROW/SPART/text() }{ '     ' }{ $TSPAT }</column>\n\n<column name='cKUNNR'>{ $KUNNR_trim }</column>\n<column name='cBUKRS'>{ $rs/KNB1/ROW/BUKRS/text() }</column>\n<column name='cVKORG'>{ $rs/KNVV/ROW/VKORG/text() }</column>\n<column name='cVTWEG'>{ $rs/KNVV/ROW/VTWEG/text() }</column>\n<column name='cSPART'>{ $rs/KNVV/ROW/SPART/text() }</column>\n\n<column name='cABLAD'>{ $rs/KNVA/ROW/ABLAD/text() }</column>\n<column name='cDEFAB'>{ $rs/KNVA/ROW/DEFAB/text() }</column>\n<column name='cKNFAK'>{ $rs/KNVA/ROW/KNFAK/text() }</column>\n<column name='cCalendar'>{ $TFACT }</column>\n<column name='cGoods'>{ $TVWAT }</column>\n\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "XD03 - Unloading Points",
  "compositionName" : "XD03"
}