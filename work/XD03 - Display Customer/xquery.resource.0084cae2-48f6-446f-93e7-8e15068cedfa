{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "688c1b42-6353-4818-bc38-8b1bbc635f94",
  "query" : "declare option xhive:index-debug 'true';\ndeclare option xhive:queryplan-debug 'true';\ndeclare option xhive:pathexpr-debug 'true';\n\ndeclare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sKUNNR external;\ndeclare variable $sBUKRS external;\ndeclare variable $sVKORG external;\ndeclare variable $sVTWEG external;\ndeclare variable $sSPART external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sKUNNR, concat(\"contains($kna1/KUNNR, &apos;\", $sKUNNR, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sBUKRS, concat(\"$knb1/BUKRS = &apos;\", $sBUKRS, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sVKORG, concat(\"$knvv/VKORG = &apos;\", $sVKORG, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sVTWEG, concat(\"$knvv/VTWEG = &apos;\", $sVTWEG, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sSPART, concat(\"$knvv/SPART = &apos;\", $sSPART, \"&apos;\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $knb1 in /SAP/KNB1/ROW, $knbk in /SAP/KNBK/ROW[KUNNR = $knb1/KUNNR], $knvv in /SAP/KNVV/ROW[KUNNR = $knb1/KUNNR], $kna1 in /SAP/KNA1/ROW[KUNNR = $knb1/KUNNR], $bnka in /SAP/BNKA/ROW[BANKS = $knbk/BANKS and BANKL = $knbk/BANKL]\", $whereClause, \"return <RS><KNA1>{ $kna1 }</KNA1><KNBK>{ $knbk }</KNBK><BNKA>{ $bnka }</BNKA><KNVV>{ $knvv }</KNVV><KNB1>{ $knb1 }</KNB1></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n\tfor $rs in $main-query\n    \nlet $T001 := sias:get_t001($rs/KNB1/ROW/BUKRS/text(), \"BUTXT\")\nlet $TVKOT := sias:get_tvkot($rs/KNVV/ROW/VKORG/text())\nlet $TVTWT := sias:get_tvtwt($rs/KNVV/ROW/VTWEG/text())\nlet $TSPAT := sias:get_tspat($rs/KNVV/ROW/SPART/text())\nlet $KUNNR_trim := sias:trimzero($rs/KNVV/ROW/KUNNR/text())\n    \n    \n    \n    \n    \nreturn\n<row id='{string($rs/KNB1/ROW/@table:id)}'>\n<column name='cKUNNR1'>{ $KUNNR_trim }{ '     ' }{ $rs/KNA1/ROW/NAME1/text() }{ '     ' }{ $rs/KNA1/ROW/ORT01/text() }</column>\n<column name='cBUKRS1'>{ $rs/KNB1/ROW/BUKRS/text() }{ '     ' }{ $T001 }</column>\n<column name='cVKORG1'>{ $rs/KNVV/ROW/VKORG/text() }{ '     ' }{ $TVKOT }</column>\n<column name='cVTWEG1'>{ $rs/KNVV/ROW/VTWEG/text() }{ '     ' }{ $TVTWT }</column>\n<column name='cSPART1'>{ $rs/KNVV/ROW/SPART/text() }{ '     ' }{ $TSPAT }</column>\n\n<column name='cKUNNR'>{ $rs/KNVV/ROW/KUNNR/text() }</column>\n<column name='cBUKRS1'>{ $rs/KNB1/ROW/BUKRS/text() }</column>\n<column name='cVKORG'>{ $rs/KNVV/ROW/VKORG/text() }</column>\n<column name='cVTWEG'>{ $rs/KNVV/ROW/VTWEG/text() }</column>\n<column name='cSPART'>{ $rs/KNVV/ROW/SPART/text() }</column>\n\n<column name='cBANKS'>{ $rs/KNBK/ROW/BANKS/text() }</column>\n<column name='cBANKL'>{ $rs/KNBK/ROW/BANKL/text() }</column>\n<column name='cBANKN'>{ $rs/KNBK/ROW/BANKN/text() }</column>\n<column name='cKOINH'>{ $rs/KNBK/ROW/KOINH/text() }</column>\n<column name='cBKONT'>{ $rs/KNBK/ROW/BKONT/text() }</column>\n<column name='cBVTYP'>{ $rs/KNBK/ROW/BVTYP/text() }</column>\n<column name='cBKREF'>{ $rs/KNBK/ROW/BKREF/text() }</column>\n<column name='cXEZER'>{ $rs/KNBK/ROW/XEZER/text() }</column>\n<column name='cBANKA'>{ $rs/BNKA/ROW/BANKA/text() }</column>\n\n<column name='cCountry'>{ $rs/BNKA/ROW/BANKS/text() }</column>\n<column name='cKey'>{ $rs/BNKA/ROW/BANKL/text() }</column>\n\n<column name='cName'>{ $rs/BNKA/ROW/BANKA/text() }</column>\n<column name='cPROVZ'>{ $rs/BNKA/ROW/PROVZ/text() }</column>\n<column name='cSTRAS'>{ $rs/BNKA/ROW/STRAS/text() }</column>\n<column name='cORT01'>{ $rs/BNKA/ROW/ORT01/text() }</column>\n<column name='cBRNCH'>{ $rs/BNKA/ROW/BRNCH/text() }</column>\n\n<column name='cSWIFT'>{ $rs/BNKA/ROW/SWIFT/text() }</column>\n<column name='cBGRUP'>{ $rs/BNKA/ROW/BGRUP/text() }</column>\n<column name='cXPGRO'>{ $rs/BNKA/ROW/XPGRO/text() }</column>\n<column name='cBNKLZ'>{ $rs/BNKA/ROW/BNKLZ/text() }</column>\n\n\n\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "XD03 - Payment Transaction",
  "compositionName" : "XD03"
}