{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "9117de13-68c8-468d-8309-5f3493d0054d",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\n \ndeclare variable $page external;\ndeclare variable $size external;\n \n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sBELNR external;\ndeclare variable $sBUKRS external;\ndeclare variable $sGJAHR external;\n \ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\n\tif (empty($var) or $var = \"\")\n\tthen $whereClause\n\telse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\n\nlet $whereClause := local:addClause(\"\", $sBUKRS, concat(\"$bkpf/BUKRS = &apos;\", $sBUKRS, \"&apos;\" ))\nlet $whereClause := local:addClause($whereClause, $sBELNR, concat(\"contains($bkpf/BELNR, &apos;\", $sBELNR, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sGJAHR, concat(\"contains($bkpf/GJAHR, &apos;\", $sGJAHR, \"&apos;)\" ))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\n\nlet $query-str := concat(\"for $bkpf in /SAP/BKPF/ROW, $bseg in /SAP/BSEG/ROW[BUKRS=$bkpf/BUKRS and BELNR=$bkpf/BELNR and GJAHR = $bkpf/GJAHR]\", $whereClause, \" return <RS><BSEG>{ $bseg }</BSEG><BKPF>{ $bkpf }</BKPF></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\nlet $rows := \n\tfor $rs in $main-query           \n    \n    let $KTOPL := sias:get_t001($rs/BSEG/ROW/BUKRS/text(), 'KTOPL')\n    let $TXT50 := sias:get_skat($KTOPL, $rs/BSEG/ROW/HKONT/text(), 'TXT50')\n    let $HKONT := sias:trimzero($rs/BSEG/ROW/HKONT/text())\n    \n    return\n\n<row id=\"{string($rs/BSEG/ROW/@table:id)}\">\n\n<column name='cBUKRS_1'>{ $rs/BSEG/ROW/BUKRS/text() }</column>\n<column name='cBUZEI_1'>{ $rs/BSEG/ROW/BUZEI/text() }</column>\n<column name='cHKONT_1'>{ $HKONT }</column>\n<column name='cBSCHL_1'>{ $rs/BSEG/ROW/BSCHL/text() }</column>\n\n<column name='cUMSKZ'>{ $rs/BSEG/ROW/UMSKZ/text() }</column>\n<column name='cTXT50'>{ $TXT50 }</column>\n<column name='cDMBTR'>{ $rs/BSEG/ROW/DMBTR/text() }</column>\n<column name='cWAERS'>{ $rs/BKPF/ROW/WAERS/text() }</column>\n<column name='cMWSKZ'>{ $rs/BSEG/ROW/MWSKZ/text() }</column>\n<column name='cKOSTL'>{ $rs/BSEG/ROW/KOSTL/text() }</column>\n<column name='cAUFNR'>{ $rs/BSEG/ROW/AUFNR/text() }</column>\n<column name='cPRCTR'>{ $rs/BSEG/ROW/PRCTR/text() }</column>\n<column name='cSEGMENT'>{ $rs/BSEG/ROW/SEGMENT/text() }</column>\n<column name='cVBELN'>{ $rs/BSEG/ROW/VBELN/text() }</column>\n<column name='cETEN2'>{ $rs/BSEG/ROW/ETEN2/text() }</column>\n\n<column name='cBELNR'>{ $rs/BSEG/ROW/BELNR/text() }</column>\n<column name='cWAERS_2'>{ $rs/BSEG/ROW/WAERS_2/text() }</column>\n<column name='cHKONT_2'>{ $rs/BSEG/ROW/HKONT_2/text() }</column>\n<column name='cFWSTE'>{ $rs/BSEG/ROW/FWSTE/text() }</column>\n<column name='cFWBAS'>{ $rs/BSEG/ROW/FWBAS/text() }</column>\n<column name='cMWSKZ'>{ $rs/BSEG/ROW/MWSKZ/text() }</column>\n<column name='cKBETR'>{ $rs/BSEG/ROW/KBETR/text() }</column>\n\n</row>\n \nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "FBL3N - Data Entry View",
  "compositionName" : "FBL3N"
}