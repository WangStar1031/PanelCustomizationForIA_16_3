{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "c63a4222-a58d-49ab-bb17-4b221482a964",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sMATNR external;\ndeclare variable $sLIFNR external;\ndeclare variable $sWERKS external;\ndeclare variable $sBEDAT external;\ndeclare variable $sBSART external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: SAP date format are ISO/YYYYMMDD, so we remove the dash from the date field :)\nlet $sBEDAT := substring(replace($sBEDAT,\"-\",\"\"),1,8) \n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sLIFNR, concat(\"contains($ekko/LIFNR, &apos;\", $sLIFNR, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sMATNR, concat(\"contains($ekpo/MATNR,&apos;\", $sMATNR, \"&apos;)\"))\nlet $whereClause := local:addClause($whereClause, $sWERKS, concat(\"contains($ekpo/WERKS,&apos;\", $sWERKS, \"&apos;)\"))\n\nlet $whereClause := local:addClause($whereClause, $sBSART, concat(\"contains($ekko/BSART, &apos;\", $sBSART, \"&apos;)\"))\nlet $whereClause := local:addClause($whereClause, $sBEDAT, concat(\"contains($ekko/BEDAT, &apos;\", $sBEDAT, \"&apos;)\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\n\n(: Search the data within the Table with a join on Document Number [EBELN] :)\n(: Select * from EKKO join EKPO on EKKO.EBELN=EKPO.EBELN :)\n\nlet $query-str := concat(\"for $ekko in /SAP/EKKO/ROW[contains('FLK',BSTYP)], $ekpo in /SAP/EKPO/ROW[EBELN = $ekko/EBELN]  \", $whereClause, \" return <RESULT><EKKO>{$ekko}</EKKO><EKPO>{$ekpo}</EKPO></RESULT>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n\tfor $elem in $main-query\n    \n    let $LIFTNR_trim := sias:trimzero($elem/EKKO/ROW/LIFNR/text())\n    let $EBELP_trim := sias:trimzero($elem/EKPO/ROW/EBELP/text())\n    let $BEDAT := sias:showdate($elem/EKKO/ROW/BEDAT/text())\n    \nreturn\n<row id='{string($elem/EKKO/ROW/@table:id)}'>\n<column name='cEBELN'>{ $elem/EKKO/ROW/EBELN/text() }</column>       \n<column name='cEBELP'>{ $EBELP_trim }</column>   \n<column name='cEKGRP'>{ $elem/EKKO/ROW/EKGRP/text() }</column> \n<column name='cTXZ01'>{ $elem/EKPO/ROW/TXZ01/text() }</column>\n<column name='cBSART'>{ $elem/EKKO/ROW/BSART/text() }</column>\n<column name='cLIFNR'>{ $LIFTNR_trim }</column>\n<column name='cBEDAT'>{ $BEDAT }</column>\n<column name='cMATNR'>{ $elem/EKPO/ROW/MATNR/text() }</column>       \n<column name='cWERKS'>{ $elem/EKPO/ROW/WERKS/text() }</column>\n<column name='cMATKL'>{ $elem/EKPO/ROW/MATKL/text() }</column>\n<column name='cKNTTP'>{ $elem/EKPO/ROW/KNTTP/text() }</column>\n<column name='cLGORT'>{ $elem/EKPO/ROW/LGORT/text() }</column>\n<column name='cMENGE'>{ $elem/EKPO/ROW/MENGE/text() }</column>\n<column name='cMEINS'>{ $elem/EKPO/ROW/MEINS/text() }</column>\n<column name='cNETPR'>{ $elem/EKPO/ROW/NETPR/text() }</column>\n<column name='cWAERS'>{ $elem/EKKO/ROW/WAERS/text() }</column>\n<column name='cPEINH'>{ $elem/EKPO/ROW/PEINH/text() }</column>\n<column name='cBPRME'>{ $elem/EKPO/ROW/BPRME/text() }</column>\n</row>     \n\n\nreturn local:getResultsPage($rows, $page, $size)\n",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "ME2M - List Purchasing Document",
  "compositionName" : "ME2M"
}