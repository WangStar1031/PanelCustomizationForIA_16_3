{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "ac8b2cae-9580-4aeb-90fe-713e6b516564",
  "query" : "declare option xhive:index-debug 'true';\ndeclare option xhive:queryplan-debug 'true';\ndeclare option xhive:pathexpr-debug 'true';\n\ndeclare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\n(: Our External Search variable matching the SAP Fieldname :)\n\ndeclare variable $sKTOPL external;\ndeclare variable $sSAKNR external;\ndeclare variable $sSAKNRto external;\ndeclare variable $sBUKRS external;\ndeclare variable $sRYEAR external;\n\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\ndeclare function local:debit($tab)\n{\nlet $TSL01 := if(fn:exists($tab/TSL01)) then ($tab/TSL01) else (0)\nlet $TSL02 := if(fn:exists($tab/TSL02)) then ($tab/TSL02) else (0)\nlet $TSL03 := if(fn:exists($tab/TSL03)) then ($tab/TSL03) else (0)\nlet $TSL04 := if(fn:exists($tab/TSL04)) then ($tab/TSL04) else (0)\nlet $TSL05 := if(fn:exists($tab/TSL05)) then ($tab/TSL05) else (0)\nlet $TSL06 := if(fn:exists($tab/TSL06)) then ($tab/TSL06) else (0)\nlet $TSL07 := if(fn:exists($tab/TSL07)) then ($tab/TSL07) else (0)\nlet $TSL08 := if(fn:exists($tab/TSL08)) then ($tab/TSL08) else (0)\nlet $TSL09 := if(fn:exists($tab/TSL09)) then ($tab/TSL09) else (0)\nlet $TSL10 := if(fn:exists($tab/TSL10)) then ($tab/TSL10) else (0)\nlet $TSL11 := if(fn:exists($tab/TSL11)) then ($tab/TSL11) else (0)\nlet $TSL12 := if(fn:exists($tab/TSL12)) then ($tab/TSL12) else (0)\nlet $TSL13 := if(fn:exists($tab/TSL13)) then ($tab/TSL13) else (0)\nlet $TSL14 := if(fn:exists($tab/TSL14)) then ($tab/TSL14) else (0)\nlet $TSL15 := if(fn:exists($tab/TSL15)) then ($tab/TSL15) else (0)\nlet $TSL16 := if(fn:exists($tab/TSL16)) then ($tab/TSL16) else (0)\n\n let $debit := if($tab/DRCRK='S') then $TSL01+$TSL02+$TSL03+$TSL04+$TSL05+$TSL06+$TSL07+$TSL08+$TSL09+$TSL10+$TSL11+$TSL12+$TSL13+$TSL14+$TSL15+$TSL16 else 0\n return $debit\n};\n\ndeclare function local:credit($tab)\n{\nlet $TSL01 := if(fn:exists($tab/TSL01)) then ($tab/TSL01) else (0)\nlet $TSL02 := if(fn:exists($tab/TSL02)) then ($tab/TSL02) else (0)\nlet $TSL03 := if(fn:exists($tab/TSL03)) then ($tab/TSL03) else (0)\nlet $TSL04 := if(fn:exists($tab/TSL04)) then ($tab/TSL04) else (0)\nlet $TSL05 := if(fn:exists($tab/TSL05)) then ($tab/TSL05) else (0)\nlet $TSL06 := if(fn:exists($tab/TSL06)) then ($tab/TSL06) else (0)\nlet $TSL07 := if(fn:exists($tab/TSL07)) then ($tab/TSL07) else (0)\nlet $TSL08 := if(fn:exists($tab/TSL08)) then ($tab/TSL08) else (0)\nlet $TSL09 := if(fn:exists($tab/TSL09)) then ($tab/TSL09) else (0)\nlet $TSL10 := if(fn:exists($tab/TSL10)) then ($tab/TSL10) else (0)\nlet $TSL11 := if(fn:exists($tab/TSL11)) then ($tab/TSL11) else (0)\nlet $TSL12 := if(fn:exists($tab/TSL12)) then ($tab/TSL12) else (0)\nlet $TSL13 := if(fn:exists($tab/TSL13)) then ($tab/TSL13) else (0)\nlet $TSL14 := if(fn:exists($tab/TSL14)) then ($tab/TSL14) else (0)\nlet $TSL15 := if(fn:exists($tab/TSL15)) then ($tab/TSL15) else (0)\nlet $TSL16 := if(fn:exists($tab/TSL16)) then ($tab/TSL16) else (0)\n\n let $credit := if ($tab/DRCRK='H') then $TSL01+$TSL02+$TSL03+$TSL04+$TSL05+$TSL06+$TSL07+$TSL08+$TSL09+$TSL10+$TSL11+$TSL12+$TSL13+$TSL14+$TSL15+$TSL16 else 0\n return $credit\n}; \n\nlet $tab :=\nfor $ska1 in /SAP/SKA1/ROW[KTOPL=$sKTOPL], \n$glt0 in /SAP/GLT0/ROW[RLDNR='00' and RRCTY='0' and RACCT=$ska1/SAKNR]\n\nwhere (if ($sSAKNR = '') then $glt0/BUKRS=$sBUKRS and $glt0/RYEAR=$sRYEAR\nelse if ($sSAKNRto = '') then $glt0/BUKRS=$sBUKRS and $glt0/RYEAR=$sRYEAR and $ska1/SAKNR = $sSAKNR\nelse $glt0/BUKRS=$sBUKRS and $glt0/RYEAR=$sRYEAR and $ska1/SAKNR >= $sSAKNR and $ska1/SAKNR <= $sSAKNRto)\n\nlet $saknr  := $glt0/RACCT\nlet $carry  := if(fn:exists($glt0/HSLVT)) then ($glt0/HSLVT) else (0)\nlet $debit  := local:debit($glt0)\nlet $credit := local:credit($glt0) \nlet $cumul  := $carry+$debit+$credit\n\ngroup by $saknr\norder by $saknr\nreturn\n<TAB><ROW>\n<SAKNR>{ $saknr/text() }</SAKNR>\n<CARRY>{ xs:decimal(sum($carry)) }</CARRY>\n<DEBIT>{ xs:decimal(sum($debit)) }</DEBIT>\n<CREDIT>{ xs:decimal(sum($credit)) }</CREDIT>\n<CUMUL>{ xs:decimal(sum($cumul)) }</CUMUL>\n</ROW></TAB>\n\nlet $rows := \nfor $rs in $tab/ROW\n  let $CURRENCY := sias:get_t001($sBUKRS, \"WAERS\")\n  let $BUKRS := $sBUKRS/text()\n  let $TEXT := sias:get_skat($sKTOPL, $rs/SAKNR/text(), \"TXT20\")\n  let $CARRY := sias:currency($rs/CARRY, '')\n  let $DEBIT := sias:currency($rs/DEBIT, '')\n  let $CREDIT := sias:currency($rs/CREDIT, '')\n  let $ACCU := sias:currency($rs/CUMUL, '')\n  let $ACCOUNT := sias:trimzero($rs/SAKNR/text())\n  let $TOTAL := xs:decimal(sum($tab/ROW/DEBIT))\n  let $TOTAL_credit := xs:decimal(sum($tab/ROW/CREDIT))\n  let $tot := sias:currency($TOTAL, '')\n  let $tot_credit := sias:currency($TOTAL_credit, '')\n  \n  \nreturn\n<row id=\"{string($rs/@table:id)}\">\n      <column name='cACCOUNT'>{ $ACCOUNT }</column>\n      <column name='cCOMPANY'>{ $BUKRS }</column>\n      <column name='cCURRENCY'>{ $CURRENCY }</column>\n      <column name='cTEXT'>{ $TEXT }</column>\n      <column name='cCARRY'>{ $CARRY }</column>\n      <column name='cDEBIT'>{ $DEBIT }</column>\n      <column name='cCREDIT'>{ $CREDIT }</column>\n      <column name='cACCU'>{ $ACCU }</column>\n      <column name='cTOTALdebit'>{ $tot } $</column>\n      <column name='cTOTALcredit'>{ $tot_credit } $</column>\n      \n</row>\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "F.08 - GL Account Balances",
  "compositionName" : "F08"
}