{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "14284327-40c8-40fc-86f7-6711f0a969aa",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\ndeclare variable $sANLN1 external;\ndeclare variable $sANLN2 external;\ndeclare variable $sBUKRS external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\nlet $whereClause := local:addClause(\"\", $sANLN1, concat(\"contains($anla/ANLN1, &apos;\", $sANLN1, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sANLN2, concat(\"contains($anla/ANLN2, &apos;\", $sANLN2, \"&apos;)\"))\nlet $whereClause := local:addClause($whereClause, $sBUKRS, concat(\"contains($anla/BUKRS, &apos;\", $sBUKRS, \"&apos;)\"))      \n      \nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause   \n\n\nlet $query-str := concat(\"for $anla in /SAP/ANLA/ROW, $anlb in /SAP/ANLB/ROW[BUKRS = $anla/BUKRS and ANLN1 = $anla/ANLN1 and ANLN2 = $anla/ANLN2], $t093b in /SAP/T093B/ROW[BUKRS = $anlb/BUKRS and AFABE = $anlb/AFABE], $anlc in /SAP/ANLC/ROW[BUKRS = $anlb/BUKRS and ANLN1 = $anlb/ANLN1 and ANLN2 = $anlb/ANLN2 and AFABE = $anlb/AFABE and GJAHR=$t093b/ABGJA]\", $whereClause, \" return <RS><ANLA>{ $anla }</ANLA><ANLB>{ $anlb }</ANLB><ANLC>{ $anlc }</ANLC></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n               for $rs in $main-query\n             let $AFAPL := sias:get_t093c($rs/ANLA/ROW/BUKRS/text(), \"AFAPL\")\n             let $AFBKTX := sias:get_t093t($AFAPL, $rs/ANLB/ROW/AFABE/text(), \"AFBKTX\")\n             let $NDJAR := sias:trimzero($rs/ANLB/ROW/NDJAR/text())\n             let $NDPER := sias:trimzero($rs/ANLB/ROW/NDPER/text())\n             let $AFABG := sias:showdate($rs/ANLB/ROW/AFABG/text())\n             let $NDABJ := sias:trimzero($rs/ANLC/ROW/NDABJ/text())\n             let $NDABP := sias:trimzero($rs/ANLC/ROW/NDABP/text())\n             let $ABGJA := sias:get_t093b($rs/ANLA/ROW/BUKRS/text(), $rs/ANLB/ROW/AFABE/text(), \"ABGJA\")\n             let $ANLN1 := sias:trimzero($rs/ANLA/ROW/ANLN1/text())\n    \nreturn\n<row id='{string($rs/ANLA/ROW/@table:id)}'>\n<column name='cANLN1'>{ $ANLN1 }</column>\n\n<column name='cXAFBE'>{ $rs/ANLB/ROW/XAFBE/text() }</column>\n<column name='cAFABE'>{ $rs/ANLB/ROW/AFABE/text() }</column>\n<column name='cAFBKTX'>{ $AFBKTX }</column>\n<column name='cAFASL'>{ $rs/ANLB/ROW/AFASL/text() }</column>\n<column name='cNDJAR'>{ $NDJAR }</column>\n<column name='cNDPER'>{ $NDPER }</column>\n<column name='cAFABG'>{ $AFABG }</column>\n<column name='cWBIND'>{ $rs/ANLB/ROW/WBIND/text() }</column>\n<column name='cNDABJ'>{ $NDABJ }</column>\n<column name='cNDABP'>{ $NDABP }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)\n",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "AS03 - Deprec. Areas",
  "compositionName" : "AS03 - Deprec. Areas"
}