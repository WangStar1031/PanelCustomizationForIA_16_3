{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "f3b25464-8dbf-4fd3-b36a-7a90434579b8",
  "query" : "declare option xhive:index-debug 'true';\ndeclare option xhive:queryplan-debug 'true';\ndeclare option xhive:pathexpr-debug 'true';\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sLIFNR external;\ndeclare variable $sBUKRS external;\ndeclare variable $sEKORG external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sLIFNR, concat(\"contains($lfa1/LIFNR, &apos;\", $sLIFNR, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sBUKRS, concat(\"contains($lfb1/BUKRS, &apos;\", $sBUKRS, \"&apos;)\"))\nlet $whereClause := local:addClause($whereClause, $sEKORG, concat(\"contains($lfm1/EKORG, &apos;\", $sEKORG, \"&apos;)\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $lfa1 in /SAP/LFA1/ROW, $lfm1 in /SAP/LFM1/ROW[LIFNR = $lfa1/LIFNR], $lfb1 in /SAP/LFB1/ROW[LIFNR = $lfa1/LIFNR], $wyt3 in /SAP/WYT3/ROW[LIFNR = $lfm1/LIFNR and EKORG = $lfm1/EKORG]\", $whereClause, \"return <RS><LFA1>{ $lfa1 }</LFA1><LFB1>{ $lfb1 }</LFB1><LFM1>{ $lfm1 }</LFM1><WYT3>{ $wyt3 }</WYT3></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n\tfor $rs in $main-query\n    \nlet $DESCR := sias:get_tpart($rs/WYT3/ROW/PARVW/text())\nlet $LIFNRtrim := sias:trimzero($rs/LFA1/ROW/LIFNR/text())\nlet $LIFNRlist := sias:trimzero($rs/LFA1/ROW/LIFNR/text())\n    \nreturn\n<row id='{string($rs/LFBK/ROW/@table:id)}'>\n<column name='cBUKRS'>{ $rs/LFB1/ROW/BUKRS/text() }</column>\n<column name='cLIFNR'>{ $rs/LFA1/ROW/LIFNR/text() }</column>\n<column name='cLIFNRtrim'>{ $LIFNRtrim }</column>\n<column name='cEKORG'>{ $rs/LFM1/ROW/EKORG/text() }</column>\n<column name='cLIFNRlist'>{ $LIFNRlist }</column>\n\n<column name='cPARVW'>{ $rs/WYT3//ROW/PARVW/text() }</column>\n<column name='cVTEXT'>{ $DESCR }</column>\n<column name='cDEFPA'>{ $rs/WYT3/ROW/DEFPA/text() }</column>\n<column name='cORT01'>{ $rs/LFA1/ROW/ORT01/text() }</column>\n<column name='cNAME1'>{ $rs/LFA1/ROW/NAME1/text() }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "XK03 - Partner Functions",
  "compositionName" : "XK03"
}