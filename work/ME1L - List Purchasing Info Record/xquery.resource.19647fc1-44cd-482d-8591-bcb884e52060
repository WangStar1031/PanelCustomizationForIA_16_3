{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "1fab396f-e6a1-4317-9327-eea84cba5e5d",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sMATNR external;\ndeclare variable $sLIFNR external;\ndeclare variable $sWERKS external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\ndeclare function local:getMAKT($matnr)\n{\n for $makt in /SAP/MAKT/ROW[MATNR = $matnr]\n return <RS><MAKT>{$makt}</MAKT></RS>\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sLIFNR, concat(\"contains($eina/LIFNR, &apos;\", $sLIFNR, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sMATNR, concat(\"contains($eina/MATNR, &apos;\", $sMATNR, \"&apos;)\"))\nlet $whereClause := local:addClause($whereClause, $sWERKS, concat(\"contains($eine/WERKS, &apos;\", $sWERKS, \"&apos;)\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\n\n(: Search the data within the Table with a join on Info Record [INFNR] :)\n(: Select * from EINA join EINA on EINA.INFNR=EINE.INFNR join EIPA on EIPA.INFNR=EINA.INFNR :)\n\nlet $query-str := concat(\"for $eina in /SAP/EINA/ROW, $eine in /SAP/EINE/ROW[INFNR = $eina/INFNR] \", $whereClause, \" return <RS><EINA>{ $eina }</EINA><EINE>{ $eine }</EINE><EIPA>{ for $eipa in /SAP/EIPA/ROW[INFNR = $eina/INFNR] return $eipa }</EIPA></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n\tfor $rs in $main-query\n    let $makt := local:getMAKT($rs/EINA/ROW/MATNR/text())\n    let $LIFNR := sias:trimzero($rs/EINA/ROW/LIFNR/text())\n    \nreturn\n<row id='{string($rs/EINA/ROW/@table:id)}'>\n<column name='cLIFNR'>{ $LIFNR }</column>\n<column name='cMATNR'>{ $rs/EINA/ROW/MATNR/text() }</column>\n<column name='cMATKL'>{ $rs/EINA/ROW/MATKL/text() }</column>\n<column name='cTXZ01'>{ $rs/EINA/ROW/TXZ01/text() }{' '}{$makt/MAKT/ROW/MAKTX/text()}</column>\n<column name='cINFNR'>{ $rs/EINA/ROW/INFNR/text() }</column>\n<column name='cMEINS'>{ $rs/EINA/ROW/MEINS/text() }</column>\n\n<column name='cWERKS'>{ $rs/EINE/ROW/WERKS/text() }</column>\n<column name='cEKORG'>{ $rs/EINE/ROW/EKORG/text() }</column>\n<column name='cEKGRP'>{ $rs/EINE/ROW/EKGRP/text() }</column>\n<column name='cESOKZ'>{ $rs/EINE/ROW/ESOKZ/text() }</column>\n<column name='cAPLFZ'>{ $rs/EINE/ROW/APLFZ/text() }</column>\n<column name='cMINBM'>{ $rs/EINE/ROW/MINBM/text() }</column>\n<column name='cNORBM'>{ $rs/EINE/ROW/NORBM/text() }</column>\n<column name='cNETPR'>{ $rs/EINE/ROW/NETPR/text() }</column>\n<column name='cWAERS'>{ $rs/EINE/ROW/WAERS/text() }</column>\n<column name='cPEINH'>{ $rs/EINE/ROW/PEINH/text() }</column>\n<column name='cBFRME'>{ $rs/EINE/ROW/BFRME/text() }</column>\n<column name='cEBELN'>{ $rs/EINE/ROW/EBELN/text() }</column>\n<column name='cEBELP'>{ $rs/EINE/ROW/EBELP/text() }</column>\n<column name='cDATLB'>{ $rs/EINE/ROW/DATLB/text() }</column>\n<column name='cPRDAT'>{ $rs/EINE/ROW/PRDAT/text() }</column>\n<column name='cINCO1'>{ $rs/EINE/ROW/INCO1/text() } { $rs/EINE/ROW/INCO2/text() }</column>\n\n<column name='tCONDITION'>Condition</column>\n<column name='tNET'>Net</column>\n<column name='tPO'>Purchase Order</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "ME1L - List Purchasing Info Record",
  "compositionName" : "ME1L"
}