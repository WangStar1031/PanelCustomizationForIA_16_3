{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "70b393ab-6ab1-4d4d-936b-ba6608eb9852",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\n\ndeclare variable $page external;\ndeclare variable $size external;\n\ndeclare variable $sOBJEK external;\ndeclare variable $sKLART external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> \n  {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\ndeclare function local:get_cawnt($atinn,$atwrt)\n{\nfor $cawn in SAP/CAWN/ROW, $cawnt in /SAP/CAWNT/ROW[ATINN = $cawn/ATINN and  ATZHL=$cawn/ATZHL and SPRAS = 'EN']\nwhere $cawn/ATINN = $atinn and $cawn/ATWRT = $atwrt\nreturn \n<RS>\n<CAWN>{ $cawn }</CAWN>\n<CAWNT>{ $cawnt }</CAWNT>\n</RS>\n};\n(: check if atwrt exist in xml files else set value to blank string :)\ndeclare function local:check_atwtb($rs,$cawnt)\n{\nlet $atwrt1 := if(fn:exists($rs/AUSP/ROW/ATWRT/text())) then ($rs/AUSP/ROW/ATWRT/text()) else (0)\nlet $atwrt := if (xs:string($atwrt1) = xs:string(\"0\")) then ($rs/AUSP/ROW/ATFLV/text()) else ($cawnt/CAWNT/ROW/ATWTB/text())\nreturn $atwrt\n};\n\ndeclare function local:get_cabnt($atinn)\n{\nfor $cabnt in /SAP/CABNT/ROW\nwhere $cabnt/ATINN = $atinn and $cabnt/SPRAS = 'EN'\nreturn $cabnt/ATBEZ/text()\n};\n\ndeclare function local:get_cabn($atinn)\n{\nfor $cabn in /SAP/CABN/ROW\nwhere $cabn/ATINN = $atinn\nreturn <CABN>{ $cabn }</CABN>\n};\n\nlet $whereClause := local:addClause(\"\", $sOBJEK, concat(\"$ausp/OBJEK = &apos;\", $sOBJEK, \"&apos;\" ))\nlet $whereClause := local:addClause($whereClause, $sKLART, concat(\"$ausp/KLART = &apos;\", $sKLART, \"&apos;\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $ausp in /SAP/AUSP/ROW \", $whereClause, \" return <RS><AUSP>{ $ausp }</AUSP></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n               for $rs in $main-query     \n               let $cawnt := local:get_cawnt($rs/AUSP/ROW/ATINN/text(),$rs/AUSP/ROW/ATWRT/text()) \n               let $cVALUE := local:check_atwtb($rs,$cawnt)\n               let $cabn := local:get_cabn($rs/AUSP/ROW/ATINN/text()) \n               let $cabnt := local:get_cabnt($rs/AUSP/ROW/ATINN/text()) \n               \n    \nreturn\n<row id='{string($rs/AUSP/ROW/@table:id)}'> \n<column name='cATBEZ'>{ $cabnt }</column>\n<column name='cATWTB'>{ $cVALUE } { ' ' } { $cabn/CABN/ROW/MSEHI/text() }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)\n",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "MM03 - Values for Class",
  "compositionName" : "MM03 - Values for Class"
}