{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "6088f878-ef3b-440b-bee2-34b0ce37a19e",
  "query" : "declare option xhive:index-debug 'true';\ndeclare option xhive:queryplan-debug 'true';\ndeclare option xhive:pathexpr-debug 'true';\n\ndeclare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\n\ndeclare variable $page external;\ndeclare variable $size external;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sSAKNR external;\ndeclare variable $sSAKNRto external;\ndeclare variable $sKTOPL external;\ndeclare variable $sBUKRS external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sKTOPL, concat(\"contains($ska1/KTOPL, &apos;\", $sKTOPL, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sSAKNR, concat(\"$ska1/SAKNR >= &apos;\", $sSAKNR, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sSAKNRto, concat(\"$ska1/SAKNR <= &apos;\", $sSAKNRto, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sBUKRS, concat(\"$skb1/BUKRS = &apos;\", $sBUKRS, \"&apos;\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $whereClause2 := local:addClause(\"\", $sKTOPL, concat(\"contains($ska1/KTOPL, &apos;\", $sKTOPL, \"&apos;)\" ))\nlet $whereClause2 := local:addClause($whereClause2, $sSAKNR, concat(\"contains($ska1/SAKNR, &apos;\", $sSAKNR, \"&apos;)\"))\nlet $whereClause2 := local:addClause($whereClause2, $sBUKRS, concat(\"$skb1/BUKRS = &apos;\", $sBUKRS, \"&apos;\"))\nlet $whereClause2 := if ($whereClause2 != \"\") then concat(\"where \", $whereClause2) else $whereClause2\n\nlet $query-str := concat(\"for $ska1 in /SAP/SKA1/ROW, $skb1 in /SAP/SKB1/ROW[SAKNR = $ska1/SAKNR]\", (if($sSAKNR = '') then $whereClause else if($sSAKNRto = '') then $whereClause2 else $whereClause), \"return <RS><SKA1>{ $ska1 }</SKA1><SKB1>{ $skb1 }</SKB1></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n\tfor $rs in $main-query\n    \nlet $TXT50 := sias:get_skat($rs/SKA1/ROW/KTOPL/text(),$rs/SKA1/ROW/SAKNR/text(), 'TXT50')\nlet $BUTXT := sias:get_t001($rs/SKB1/ROW/BUKRS/text(), \"BUTXT\")\nlet $ERDAT := sias:showdate($rs/SKA1/ROW/ERDAT/text())\n\nlet $ERDAT2 := sias:showdate($rs/SKB1/ROW/ERDAT/text())\nlet $ZINDT := sias:showdate($rs/SKB1/ROW/ZINDT/text())\nlet $SAKNR := sias:trimzero($rs/SKA1/ROW/SAKNR/text())\n\nreturn\n<row id='{string($rs/KNA1/ROW/@table:id)}'>\n<column name='cSAKNR'>{ $SAKNR }</column>\n<column name='cBUKRS'>{ $rs/SKB1/ROW/BUKRS/text() }</column>\n<column name='cBUTXT'>{ $BUTXT }</column>\n\n<column name='cTXT501'>{ $TXT50 }</column>\n<column name='cKTOKS1'>{ $rs/SKA1/ROW/KTOKS/text() }</column>\n<column name='cERNAM1'>{ $rs/SKA1/ROW/ERNAM/text() }</column>\n<column name='cERDAT1'>{ $ERDAT }</column>\n<column name='cXSPEA1'>{ $rs/SKA1/ROW/XSPEA/text() }</column>\n<column name='cXSPEB1'>{ $rs/SKA1/ROW/XSPEB/text() }</column>\n<column name='cXSPEP1'>{ $rs/SKA1/ROW/XSPEP/text() }</column>\n<column name='cXLOEV1'>{ $rs/SKA1/ROW/XLOEV/text() }</column>\n<column name='cXBILK1'>{ $rs/SKA1/ROW/XBILK/text() }</column>\n<column name='cGVTYP1'>{ $rs/SKA1/ROW/GVTYP/text() }</column>\n<column name='cMUSTR1'>{ $rs/SKA1/ROW/MUSTR/text() }</column>\n<column name='cVBUND1'>{ $rs/SKA1/ROW/VBUND/text() }</column>\n<column name='cBILKT1'>{ $rs/SKA1/ROW/BILTK/text() }</column>\n\n<column name='cERNAM2'>{ $rs/SKB1/ROW/ERNAM/text() }</column>\n<column name='cERDAT2'>{ $ERDAT2 }</column>\n<column name='cXSPEB2'>{ $rs/SKB1/ROW/XSPEB/text() }</column>\n<column name='cXLOEB2'>{ $rs/SKB1/ROW/XLOEB/text() }</column>\n<column name='cMWSKZ2'>{ $rs/SKB1/ROW/MWSKZ/text() }</column>\n<column name='cMITKZ2'>{ $rs/SKB1/ROW/MITKZ/text() }</column>\n<column name='cKDFSL2'>{ $rs/SKB1/ROW/KDFSL/text() }</column>\n<column name='cWAERS2'>{ $rs/SKB1/ROW/WAERS/text() }</column>\n<column name='cXSALH2'>{ $rs/SKB1/ROW/XSALH/text() }</column>\n<column name='cXMWNO2'>{ $rs/SKB1/ROW/XMWN0/text() }</column>\n<column name='cWMETH2'>{ $rs/SKB1/ROW/WMETH/text() }</column>\n<column name='cXKRES2'>{ $rs/SKB1/ROW/XKRES/text() }</column>\n<column name='cXOPVW2'>{ $rs/SKB1/ROW/XOPVW/text() }</column>\n<column name='cZUAWA2'>{ $rs/SKB1/ROW/ZUAWA/text() }</column>\n<column name='cFSTAG2'>{ $rs/SKB1/ROW/FSTAG/text() }</column>\n<column name='cXINTB2'>{ $rs/SKB1/ROW/XINTB/text() }</column>\n<column name='cXNKON2'>{ $rs/SKB1/ROW/XNKON/text() }</column>\n<column name='cXMITK2'>{ $rs/SKB1/ROW/XMITK/text() }</column>\n<column name='cFDLEV2'>{ $rs/SKB1/ROW/FDLEV/text() }</column>\n<column name='cXGKON2'>{ $rs/SKB1/ROW/XGKON/text() }</column>\n<column name='cFIPOS2'>{ $rs/SKB1/ROW/FIPOS/text() }</column>\n<column name='cHBKID2'>{ $rs/SKB1/ROW/HBKID/text() }</column>\n<column name='cKHKTID2'>{ $rs/SKB1/ROW/KHKTID/text() }</column>\n<column name='cVZSKZ2'>{ $rs/SKB1/ROW/VZSKZ/text() }</column>\n<column name='cZINDT2'>{ $ZINDT }</column>\n<column name='cDATLZ2'>{ $rs/SKB1/ROW/DATLZ/text() }</column>\n<column name='cZINRT2'>{ $rs/SKB1/ROW/ZINRT/text() }</column>\n\n<column name='cBEGRU2'>{ $rs/SKB1/ROW/BEGRU/text() }</column>\n<column name='cBUSAB2'>{ $rs/SKB1/ROW/BUSAB/text() }</column>\n<column name='cRECID2'>{ $rs/SKB1/ROW/RECID/text() }</column>\n<column name='cALTKT2'>{ $rs/SKB1/ROW/ALTKT/text() }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "F.09 - GL Account List",
  "compositionName" : "F.09"
}