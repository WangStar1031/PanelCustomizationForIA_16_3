{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "bc08059b-2c36-4d0e-a40d-d60bbfc9d335",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external := 0;\ndeclare variable $size external := 10;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sVKORG external;\ndeclare variable $sVTWEG external;\ndeclare variable $sKUNNR external;\ndeclare variable $sKSCHL :='PR00';\ndeclare variable $sKAPPL := 'V';\n\ndeclare function local:getResultsPage($rows, $page, $size)\n{\n\tlet $offset := $page * $size\n  \tlet $total := count($rows)\n  \treturn <results total=\"{ $total }\"> { for $row in subsequence($rows, $offset + 1, $size) return $row }</results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\n\tif (empty($var) or $var = \"\")\n\tthen $whereClause\n\telse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sKSCHL, concat(\"contains($a305/KSCHL, &apos;\", $sKSCHL, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sVKORG, concat(\"$a305/VKORG = &apos;\", $sVKORG, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sVTWEG, concat(\"$a305/VTWEG = &apos;\", $sVTWEG, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sKUNNR, concat(\"$a305/KUNNR = &apos;\", $sKUNNR, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sKAPPL, concat(\"$a305/KAPPL = &apos;\", $sKAPPL, \"&apos;\"))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $a305 in /SAP/A305/ROW,$konp in /SAP/KONP/ROW[KNUMH = $a305/KNUMH],$konh in /SAP/KONH/ROW[KNUMH = $a305/KNUMH],$makt in /SAP/MAKT/ROW[MATNR = $a305/MATNR and SPRAS = 'EN'] \", $whereClause, \" return <RS><A305>{ $a305 }</A305><KONP>{ $konp }</KONP><KONH>{ $konh } </KONH><MAKT>{ $makt }</MAKT></RS>\") \nlet $main-query := xhive:evaluate($query-str)\nlet $rows := \n\tfor $rs in $main-query\n    let $BLDAT := sias:showdate($rs/BKPF/ROW/BLDAT/text())\n    let $BUDAT := sias:showdate($rs/BKPF/ROW/BUDAT/text())\n    let $CPUDT := sias:showdate($rs/BKPF/ROW/CPUDT/text())\n    let $CPUTM := sias:showtime($rs/BKPF/ROW/CPUTM/text())\n    let $LTEXT := sias:get_t003t($rs/BKPF/ROW/BLART/text())\n    let $AEDAT := sias:showdate($rs/BKPF/ROW/AEDAT/text())\n    let $UPDDT := sias:showdate($rs/BKPF/ROW/UPDDT/text())\n    let $CN := sias:get_t001($rs/BKPF/ROW/BUKRS/text(), 'BUTXT')\n    return\n\n<row id='{string($rs/A305/ROW/@table:id)}'>\n<column name='cMATNR'>{ $rs/A305/ROW/MATNR/text() }</column>\n<column name='cKFRST'>{ $rs/A305/ROW/KFRST/text() }</column>\n<column name='cMAKTX'>{ $rs/MAKT/ROW/MAKTX/text() }</column>\n<column name='cKBSTAT'>{ $rs/A305/ROW/KBSTAT/text() }</column>\n<column name='cKBETR'>{ $rs/KONP/ROW/KBETR/text() }</column>\n<column name='cKONWA'>{ $rs/KONP/ROW/KONWA/text() }</column>\n<column name='cKPEIN'>{ $rs/KONP/ROW/KPEIN/text() }</column>\n<column name='cKMEIN'>{ $rs/KONP/ROW/KMEIN/text() }</column>\n\n<column name='cKRECH'>{ $rs/KONP/ROW/KRECH/text() }</column>\n<column name='cKZBZG'>{ $rs/KONP/ROW/KZBZG/text() }</column>\n<column name='cDATAB'>{ $rs/KONH/ROW/DATAB/text() }</column>\n<column name='cDATBI'>{ $rs/KONH/ROW/DATBI/text() }</column>\n<column name='cLOEVM_KO'>{ $rs/KONP/ROW/LOEVM_KO/text() }</column>\n<column name='cKZNEP'>{ $rs/KONP/ROW/KZNEP/text() }</column>\n<column name='cZTERM'>{ $rs/KONP/ROW/ZTERM/text() }</column>\n<column name='cVALDT'>{ $rs/KONP/ROW/VALDT/text() }</column>\n<column name='cVALTG'>{ $rs/KONP/ROW/VALTG/text() }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "VK13 - Display condition record",
  "compositionName" : "VK13(PR00) Display Condition Records"
}