{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "020d7889-8f8a-43dc-9853-79b271ab2ef7",
  "query" : "declare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external := 0;\ndeclare variable $size external := 10;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sKTOPL external;\ndeclare variable $sBUKRS external;\ndeclare variable $sSAKNR external;\n\ndeclare variable $sRYEAR external;\ndeclare variable $sCYEAR external;\n\ndeclare function local:getResultsPage($rows, $page, $size)\n{\n\tlet $offset := $page * $size\n  \tlet $total := count($rows)\n  \treturn <results total=\"{ $total }\"> { for $row in subsequence($rows, $offset + 1, $size) return $row }</results>\n};\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\n\tif (empty($var) or $var = \"\")\n\tthen $whereClause\n\telse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\ndeclare function local:getFAG($ryear,$saknr,$rbukrs)\n{\n\tfor $faglflext in /SAP/FAGLFLEXT/ROW[RYEAR = $ryear and RLDNR = '0L' and RRCTY = '0' and RVERS = '001' and RACCT = $saknr and RBUKRS = $rbukrs]\n    return <RS><FAGLFLEXT>{$faglflext}</FAGLFLEXT></RS>\n};\ndeclare function local:getFAGC($cyear,$saknr,$rbukrs)\n{\n\tfor $faglflext in /SAP/FAGLFLEXT/ROW[RYEAR = $cyear and RLDNR = '0L' and RRCTY = '0' and RVERS = '001' and RACCT = $saknr and RBUKRS = $rbukrs]\n    return <RS><FAGLFLEXT>{$faglflext}</FAGLFLEXT></RS>\n};\n\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sSAKNR, concat(\"contains($ska1/SAKNR, &apos;\", $sSAKNR, \"&apos;)\" ))\nlet $whereClause := local:addClause($whereClause, $sKTOPL, concat(\"$ska1/KTOPL = &apos;\", $sKTOPL, \"&apos;\"))\nlet $whereClause := local:addClause($whereClause, $sBUKRS, concat(\"$skb1/BUKRS = &apos;\", $sBUKRS, \"&apos;\"))\n\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\nlet $query-str := concat(\"for $ska1 in /SAP/SKA1/ROW,$skb1 in /SAP/SKB1/ROW[SAKNR = $ska1/SAKNR and MANDT = $ska1/MANDT],$faglflext in /SAP/FAGLFLEXT/ROW[RYEAR = '\",$sRYEAR,\"' and RLDNR = '0L' and RRCTY = '0' and RVERS = '001' and RACCT = $skb1/SAKNR and RBUKRS = $skb1/BUKRS]\", $whereClause, \" return <RS><SKA1>{$ska1}</SKA1><SKB1>{$skb1}</SKB1><FAGLFLEXT>{$faglflext}</FAGLFLEXT></RS>\")\nlet $main-query := xhive:evaluate($query-str)\nlet $rows := \n\tfor $rs in $main-query\n    let $FAG := local:getFAG($sRYEAR,$rs/SKA1/ROW/SAKNR/text(),$rs/SKB1/ROW/BUKRS/text())\n    let $FAGC := local:getFAGC($sCYEAR,$rs/SKA1/ROW/SAKNR/text(),$rs/SKB1/ROW/BUKRS/text())\n    let $butxt := sias:get_t001($rs/SKB1/ROW/BUKRS/text(), \"BUTXT\")\n\tlet $waers := sias:get_t001($rs/SKB1/ROW/BUKRS/text(), \"WAERS\")\n    let $txt50 := sias:get_skat($rs/SKA1/ROW/KTOPL/text(),$rs/SKA1/ROW/SAKNR/text(), \"TXT50\")\n    (:Reporting Data:)\n    let $HSLVT := if (fn:exists($FAG/FAGLFLEXT/ROW/HSLVT/text())) then ($FAG/FAGLFLEXT/ROW/HSLVT/text()) else (0)\n    let $HSL01 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL01/text())) then ($FAG/FAGLFLEXT/ROW/HSL01/text()) else (0)\n   let $HSL02 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL02/text())) then ($FAG/FAGLFLEXT/ROW/HSL02/text()) else(0)\n   let $HSL03 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL03/text())) then ($FAG/FAGLFLEXT/ROW/HSL03/text()) else(0)\n   let $HSL04 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL04/text())) then ($FAG/FAGLFLEXT/ROW/HSL04/text()) else(0)\n   let $HSL05 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL05/text())) then ($FAG/FAGLFLEXT /ROW/HSL05/text()) else(0) \n   let $HSL06 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL06/text())) then ($FAG/FAGLFLEXT/ROW/HSL06/text()) else(0)  \n   let $HSL07 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL07/text())) then ($FAG/FAGLFLEXT/ROW/HSL07/text()) else(0)  \n   let $HSL08 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL08/text())) then ($FAG/FAGLFLEXT/ROW/HSL08/text()) else(0)  \n   let $HSL09 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL09/text())) then ($FAG/FAGLFLEXT/ROW/HSL09/text()) else(0)  \n   let $HSL10 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL10/text())) then ($FAG/FAGLFLEXT/ROW/HSL10/text()) else(0)  \n   let $HSL11 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL11/text())) then ($FAG/FAGLFLEXT/ROW/HSL11/text()) else(0) \n   let $HSL12 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL12/text())) then ($FAG/FAGLFLEXT/ROW/HSL12/text()) else(0) \n   let $HSL13  := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL13/text())) then ($FAG/FAGLFLEXT/ROW/HSL13/text()) else(0)\n   let $HSL14 := if (fn:exists($FAG/FAGLFLEXT/ROW/HSL14/text())) then ($FAG/FAGLFLEXT/ROW/HSL14/text()) else(0) \n   let $HSL15 := if (fn:exists($rs/FAGLFLEXT/ROW/HSL15/text())) then ($rs/FAGLFLEXT/ROW/HSL15/text()) else(0)\n   let $HSL16 := if (fn:exists($rs/FAGLFLEXT/ROW/HSL16/text())) then ($rs/FAGLFLEXT/ROW/HSL16/text()) else(0)\n   (:END:)\n   \n   (:Comparison Data:)\n   let $CHSLVT := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSLVT/text())) then ($FAGC/FAGLFLEXT/ROW/HSLVT/text()) else (0)\n   let $CHSL01 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL01/text())) then ($FAGC/FAGLFLEXT/ROW/HSL01/text()) else (0)\n   let $CHSL02 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL02/text())) then ($FAGC/FAGLFLEXT/ROW/HSL02/text()) else(0)\n   let $CHSL03 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL03/text())) then ($FAGC/FAGLFLEXT/ROW/HSL03/text()) else(0)\n   let $CHSL04 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL04/text())) then ($FAGC/FAGLFLEXT/ROW/HSL04/text()) else(0)\n   let $CHSL05 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL05/text())) then ($FAGC/FAGLFLEXT /ROW/HSL05/text()) else(0) \n   let $CHSL06 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL06/text())) then ($FAGC/FAGLFLEXT/ROW/HSL06/text()) else(0)  \n   let $CHSL07 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL07/text())) then ($FAGC/FAGLFLEXT/ROW/HSL07/text()) else(0)  \n   let $CHSL08 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL08/text())) then ($FAGC/FAGLFLEXT/ROW/HSL08/text()) else(0)  \n   let $CHSL09 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL09/text())) then ($FAGC/FAGLFLEXT/ROW/HSL09/text()) else(0)  \n   let $CHSL10 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL10/text())) then ($FAGC/FAGLFLEXT/ROW/HSL10/text()) else(0)  \n   let $CHSL11 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL11/text())) then ($FAGC/FAGLFLEXT/ROW/HSL11/text()) else(0) \n   let $CHSL12 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL12/text())) then ($FAGC/FAGLFLEXT/ROW/HSL12/text()) else(0) \n   let $CHSL13  := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL13/text())) then ($FAGC/FAGLFLEXT/ROW/HSL13/text()) else(0)\n   let $CHSL14 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL14/text())) then ($FAGC/FAGLFLEXT/ROW/HSL14/text()) else(0) \n   let $CHSL15 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL15/text())) then ($FAGC/FAGLFLEXT/ROW/HSL15/text()) else(0)\n   let $CHSL16 := if (fn:exists($FAGC/FAGLFLEXT/ROW/HSL16/text())) then ($FAGC/FAGLFLEXT/ROW/HSL16/text()) else(0)\n   (:END:)\n   let $codeA := sum($HSLVT) + sum($HSL01) + sum($HSL02) + sum($HSL03) + sum($HSL04) + sum($HSL05) + sum($HSL06) + sum($HSL07) + sum($HSL08) + sum($HSL09) + sum($HSL10) + sum($HSL11) + sum($HSL12) + sum($HSL13) + sum($HSL14) + sum($HSL15) + sum($HSL16)\n   let $codeB := sum($CHSLVT) + sum($CHSL01) + sum($CHSL02) + sum($CHSL03) + sum($CHSL04) + sum($CHSL05) + sum($CHSL06) + sum($CHSL07) + sum($CHSL08) + sum($CHSL09) + sum($CHSL10) + sum($CHSL11) + sum($CHSL12) + sum($CHSL13) + sum($CHSL14) + sum($CHSL15) + sum($CHSL16)\n   let $calc := $codeA - $codeB\n   let $calc2 := ($calc div $codeB)* 100\n    return\n\n<row id='{string($rs/BKPF/ROW/@table:id)}'>\n<column name='cBUTXT'>{ $butxt }</column>\n<column name='cVSTXT'>{ 'Financial Statement for Liquidity Funds' }</column>\n<column name='cWAERS'>{ $waers }</column>\n\n<column name='cRBUKRS'>{$rs/SKB1/ROW/BUKRS/text()}</column>\n<column name='cRBUSA'>{ $rs/FAGLFLEXT/ROW/RBUSA/text() }</column>\n<column name='cRACCT'>{ $rs/SKA1/ROW/SAKNR/text() }{'  '}{$txt50}</column>\n<column name='cCODEA'>{ fn:format-number($codeA,\"#,##0.00\") }</column>\n<column name='cCODEB'>{ fn:format-number($codeB,\"#,##0.00\") }</column>\n<column name='cCALC'>{ fn:format-number($calc,\"#,##0.00\") }</column>\n<column name='cCALC2'>{  fn:format-number($calc2,\"#,##0.00\") }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "S_ALR_87012284 - Financial Statements (FC10  & F.01)",
  "compositionName" : "Set 1"
}