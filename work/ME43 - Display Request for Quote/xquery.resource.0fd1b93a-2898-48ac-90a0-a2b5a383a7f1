{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "a1b97ca7-59c1-4bfa-873d-790f54d27a47",
  "query" : "declare option xhive:index-debug 'true';\ndeclare option xhive:queryplan-debug 'true';\ndeclare option xhive:pathexpr-debug 'true';\n\ndeclare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sEBELN external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sEBELN, concat(\"contains($ekko/EBELN, &apos;\", $sEBELN, \"&apos;)\" ))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\n\n(: Search the data within the Table with a join on Info Record [INFNR] :)\n(: Select * from EKKO where EBELN = '' :)\n\nlet $query-str := concat(\"for $ekko in /SAP/EKKO/ROW[BSTYP = 'A'] \", $whereClause, \" return <RS><EKKO>{ $ekko }</EKKO></RS>\")\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows :=  \n\tfor $rs in $main-query\n    \n    let $LIFNR_name := sias:get_lfa1($rs/EKKO/ROW/LIFNR/text(), \"NAME1\")\n    let $BEDAT := sias:showdate($rs/EKKO/ROW/BEDAT/text())\n    let $ANGDT := sias:showdate($rs/EKKO/ROW/ANGDT/text())\n    let $KDATB := sias:showdate($rs/EKKO/ROW/KDATB/text())\n    let $KDATE := sias:showdate($rs/EKKO/ROW/KDATE/text())\n    let $BWBDT := sias:showdate($rs/EKKO/ROW/BWBDT/text())\n    let $GWLDT := sias:showdate($rs/EKKO/ROW/GWLDT/text())\n    let $BNDDT := sias:showdate($rs/EKKO/ROW/BNDDT/text())\n    let $AEDAT := sias:showdate($rs/EKKO/ROW/AEDAT/text())\n    \nreturn\n<row id='{string($rs/EKKO/ROW/@table:id)}'>\n<column name='cEBELN'>{ $rs/EKKO/ROW/EBELN/text() }</column>\n<column name='cBSART'>{ $rs/EKKO/ROW/BSART/text() }</column>\n<column name='cLIFNR'>{ $rs/EKKO/ROW/LIFNR/text() }</column>\n<column name='cLIFNR_name'>{ $rs/EKKO/ROW/LIFNR/text() } { ' ' } { $LIFNR_name }</column>\n<column name='cBEDAT'>{ $BEDAT }</column>\n<column name='cANGDT'>{ $ANGDT }</column>\n<column name='cBURKS'>{ $rs/EKKO/ROW/BURKS/text() }</column>\n<column name='cBKGRP'>{ $rs/EKKO/ROW/BKGRP/text() }</column>\n<column name='cEKORG'>{ $rs/EKKO/ROW/EKORG/text() }</column>\n<column name='cPINCR'>{ $rs/EKKO/ROW/PINCR/text() }</column>\n<column name='cSUBMI'>{ $rs/EKKO/ROW/SUBMI/text() }</column>\n<column name='cSPRAS'>{ $rs/EKKO/ROW/SPRAS/text() }</column>\n<column name='cUPINC'>{ $rs/EKKO/ROW/UPINC/text() }</column>\n<column name='cKDATB'>{ $KDATB }</column>\n<column name='cKDATE'>{ $KDATE }</column>\n<column name='cBWBDT'>{ $BWBDT }</column>\n<column name='cGWLDT'>{ $GWLDT }</column>\n<column name='cBNDDT'>{ $BNDDT }</column>\n<column name='cKTWRT'>{ $rs/EKKO/ROW/KTWRT/text() }</column>\n<column name='cIHREZ'>{ $rs/EKKO/ROW/IHREZ/text() }</column>\n<column name='cVERKF'>{ $rs/EKKO/ROW/VERKF/text() }</column>\n<column name='cUNSEZ'>{ $rs/EKKO/ROW/UNSEZ/text() }</column>\n<column name='cTELF1'>{ $rs/EKKO/ROW/TELF1/text() }</column>\n<column name='cAEDAT'>{ $AEDAT }</column>\n<column name='cERNAM'>{ $rs/EKKO/ROW/ERNAM/text() }</column>\n<column name='cLPONR'>{ $rs/EKKO/ROW/LPONR/text() }</column>\n<column name='cSTATU'>{ $rs/EKKO/ROW/STATU/text() }</column>\n<column name='cKALSM'>{ $rs/EKKO/ROW/KALSM/text() }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "ME43 - Display Request for Quote",
  "compositionName" : "ME43"
}