{
  "createdBy" : "admin@sigma-sbs.com",
  "createdDate" : null,
  "lastModifiedBy" : "admin@sigma-sbs.com",
  "lastModifiedDate" : null,
  "name" : "e4c44720-1220-4100-a39c-4b03be510c3a",
  "query" : "declare option xhive:index-debug 'true';\ndeclare option xhive:queryplan-debug 'true';\ndeclare option xhive:pathexpr-debug 'true';\n\ndeclare namespace ia = \"urn:x-emc:ia:schema:fn\";\ndeclare namespace table=\"urn:x-emc:ia:schema:table\";\n\nimport module namespace sias=\"urn:x-sig:sias:util:fn\";\n\ndeclare variable $page external;\ndeclare variable $size external;\n\n(: Our External Search variable matching the SAP Fieldname :)\ndeclare variable $sEBELN external;\ndeclare variable $sEBELP external;\n\ndeclare function local:getResultsPage($rows, $page, $size) {\n  let $offset := $page * $size\n  let $total := count($rows)\n  return <results total=\"{ $total }\"> {\n    for $row in subsequence($rows, $offset + 1, $size)\n      return $row\n  } </results>\n};\n\n\ndeclare function local:addClause($whereClause as xs:string, $var as xs:string*, $expr as xs:string) as xs:string\n{\nif (empty($var) or $var = \"\")\nthen $whereClause\nelse if ($whereClause = \"\") then $expr else concat($whereClause, \" and \", $expr)\n};\n\n(: Build a conditional Where clause :)\nlet $whereClause := local:addClause(\"\", $sEBELN, concat(\"contains($ekpo/EBELN, &apos;\", $sEBELN, \"&apos;)\" ))\nlet $whereClause := if ($whereClause != \"\") then concat(\"where \", $whereClause) else $whereClause\n\n\n(: Search the data within the Table with a join on Info Record [INFNR] :)\n(: Select * from EKPO where EBELN = '' join EKET on EKPO.EBELN = EKET.EBELN and EKPO.EBELP = EKET.EBELP :)\n\nlet $query-str := concat(\"for $ekpo in /SAP/EKPO/ROW, $eket in /SAP/EKET/ROW[EBELN=$ekpo/EBELN and EBELP=$ekpo/EBELP] \", $whereClause, \" return <RS><EKPO>{ $ekpo }</EKPO><EKET>{$eket}</EKET></RS>\") \n(:let $query-str := concat(\"for $ekpo in /SAP/EKPO/ROW \", $whereClause, \" return <RS><EKPO>{ $ekpo }</EKPO></RS>\") :)\n\nlet $main-query := xhive:evaluate($query-str)\n\nlet $rows := \n\tfor $rs in $main-query\n    \n    let $MEINS := sias:get_t006a($rs/EKPO/ROW/MEINS/text())\nreturn\n<row id='{string($rs/EKKO/ROW/@table:id)}'>\n<column name='cEBELN'>{ $rs/EKPO/ROW/EBELN/text() }</column>\n<column name='cEBELP'>{ $rs/EKPO/ROW/EBELP/text() }</column>\n<column name='cPSTYP'>{ $rs/EKPO/ROW/PSTYP/text() }</column>\n<column name='cMATNR'>{ $rs/EKPO/ROW/MATNR/text() }</column>\n<column name='cMENGE'>{ $rs/EKPO/ROW/MENGE/text() }</column>\n<column name='cMEINS'>{ $MEINS }</column>\n<column name='cTXZ01'>{ $rs/EKPO/ROW/TXZ01/text() }</column>\n<column name='cMATKL'>{ $rs/EKPO/ROW/MATKL/text() }</column>\n<column name='cWERKS'>{ $rs/EKPO/ROW/WERKS/text() }</column>\n<column name='cLGORT'>{ $rs/EKPO/ROW/LGORT/text() }</column>\n<column name='cLOEKZ'>{ $rs/EKPO/ROW/LOEKZ/text() }</column>\n<column name='cAGDAT'>{ $rs/EKPO/ROW/AGDAT/text() }</column>\n<column name='cMAHN1'>{ $rs/EKPO/ROW/MAHN1/text() }</column>\n<column name='cMAHN2'>{ $rs/EKPO/ROW/MAHN2/text() }</column>\n<column name='cMAHN3'>{ $rs/EKPO/ROW/MAHN3/text() }</column>\n<column name='cMAHNZ'>{ $rs/EKPO/ROW/MAHNZ/text() }</column>\n<column name='cBEDNR'>{ $rs/EKPO/ROW/BEDNR/text() }</column>\n<column name='cIDNLF'>{ $rs/EKPO/ROW/IDNLF/text() }</column>\n<column name='cINFNR'>{ $rs/EKPO/ROW/INFNR/text() }</column>\n<column name='cBANFN'>{ $rs/EKPO/ROW/BANFN/text() }</column>\n<column name='cAEDAT'>{ $rs/EKPO/ROW/AEDAT/text() }</column>\n<column name='cSTATU'>{ $rs/EKPO/ROW/STATU/text() }</column>\n<column name='cLOEKZ'>{ $rs/EKPO/ROW/LOEKZ/text() }</column>\n<column name='cPLIFZ'>{ $rs/EKPO/ROW/PLIFZ/text() }</column>\n<column name='cSAISO'>{ $rs/EKPO/ROW/SAISO/text() }</column>\n<column name='cSAISJ'>{ $rs/EKPO/ROW/SAISJ/text() }</column>\n<column name='cKANBA'>{ $rs/EKPO/ROW/KANBA/text() }</column>\n<column name='cAUREL'>{ $rs/EKPO/ROW/AUREL/text() }</column>\n<column name='cBSGRU'>{ $rs/EKPO/ROW/BSGRU/text() }</column>\n<column name='cNTGEW'>{ $rs/EKPO/ROW/NTGEW/text() }</column>\n<column name='cGEWEI'>{ $rs/EKPO/ROW/GEWEI/text() }</column>\n<column name='cBRGEW'>{ $rs/EKPO/ROW/IDNLF/text() }</column>\n<column name='cVOLUM'>{ $rs/EKPO/ROW/VOLUM/text() }</column>\n<column name='cVOLEH'>{ $rs/EKPO/ROW/VOLEH/text() }</column>\n<column name='cANZPU'>{ $rs/EKPO/ROW/ANZPU/text() }</column>\n<column name='cPUNEI'>{ $rs/EKPO/ROW/PUNEI/text() }</column>\n<column name='cINCO2'>{ $rs/EKPO/ROW/INCO2/text() }</column>\n<column name='cSSQSS'>{ $rs/EKPO/ROW/SSQSS/text() }</column>\n</row>\n\nreturn local:getResultsPage($rows, $page, $size)",
  "moduleNamespaces" : [ "urn:x-sig:sias:util:fn" ],
  "searchName" : "ME43 - Display Request for Quote Items",
  "compositionName" : "ME43i"
}